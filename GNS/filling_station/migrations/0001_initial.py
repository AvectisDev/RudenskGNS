# Generated by Django 5.0.6 on 2025-02-18 10:12

import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('pghistory', '0006_delete_aggregateevent'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BalloonAmount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reader_id', models.IntegerField(blank=True, null=True, verbose_name='Номер считывателя')),
                ('reader_status', models.CharField(blank=True, max_length=50, null=True, verbose_name='Статус')),
                ('amount_of_balloons', models.IntegerField(blank=True, null=True, verbose_name='Количество баллонов по датчику')),
                ('amount_of_rfid', models.IntegerField(blank=True, null=True, verbose_name='Количество баллонов по считывателю')),
                ('change_date', models.DateField(auto_now=True, null=True, verbose_name='Дата обновления')),
                ('change_time', models.TimeField(auto_now=True, null=True, verbose_name='Время обновления')),
            ],
        ),
        migrations.CreateModel(
            name='FilePath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TrailerType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100, verbose_name='Тип прицепа')),
            ],
            options={
                'verbose_name': 'Тип прицепа',
                'verbose_name_plural': 'Типы прицепов',
            },
        ),
        migrations.CreateModel(
            name='Truck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('car_brand', models.CharField(blank=True, max_length=20, null=True, verbose_name='Марка авто')),
                ('registration_number', models.CharField(max_length=10, verbose_name='Регистрационный знак')),
                ('capacity_cylinders', models.IntegerField(blank=True, null=True, verbose_name='Максимальная вместимость баллонов')),
                ('max_weight_of_transported_cylinders', models.FloatField(blank=True, null=True, verbose_name='Максимальная масса перевозимых баллонов')),
                ('max_mass_of_transported_gas', models.FloatField(blank=True, null=True, verbose_name='Максимальная масса перевозимого газа')),
                ('max_gas_volume', models.FloatField(blank=True, null=True, verbose_name='Максимальный объём перевозимого газа')),
                ('empty_weight', models.FloatField(blank=True, null=True, verbose_name='Вес пустого т/с (по техпаспорту)')),
                ('full_weight', models.FloatField(blank=True, null=True, verbose_name='Вес полного т/с (по техпаспорту)')),
                ('is_on_station', models.BooleanField(blank=True, null=True, verbose_name='Находится на станции')),
                ('entry_date', models.DateField(blank=True, null=True, verbose_name='Дата въезда')),
                ('entry_time', models.TimeField(blank=True, null=True, verbose_name='Время въезда')),
                ('departure_date', models.DateField(blank=True, null=True, verbose_name='Дата выезда')),
                ('departure_time', models.TimeField(blank=True, null=True, verbose_name='Время выезда')),
            ],
            options={
                'verbose_name': 'Грузовик',
                'verbose_name_plural': 'Грузовики',
                'ordering': ['-entry_date', '-entry_time', '-departure_date', '-departure_time'],
            },
        ),
        migrations.CreateModel(
            name='TruckType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100, verbose_name='Тип грузовика')),
            ],
            options={
                'verbose_name': 'Тип грузовика',
                'verbose_name_plural': 'Типы грузовиков',
            },
        ),
        migrations.CreateModel(
            name='TTN',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=100, verbose_name='Номер ТТН')),
                ('contract', models.CharField(blank=True, max_length=100, verbose_name='Номер договора')),
                ('shipper', models.CharField(max_length=100, verbose_name='Грузоотправитель')),
                ('carrier', models.CharField(max_length=100, verbose_name='Перевозчик')),
                ('consignee', models.CharField(max_length=100, verbose_name='Грузополучатель')),
                ('gas_amount', models.FloatField(blank=True, null=True, verbose_name='Количество газа')),
                ('gas_type', models.CharField(choices=[('Не выбран', 'Не выбран'), ('СПБТ', 'СПБТ'), ('ПБА', 'ПБА')], default='Не выбран', max_length=10, verbose_name='Тип газа')),
                ('balloons_amount', models.IntegerField(blank=True, null=True, verbose_name='Количество баллонов')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Дата формирования накладной')),
            ],
            options={
                'verbose_name': 'ТТН',
                'verbose_name_plural': 'ТТН',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Balloon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nfc_tag', models.CharField(blank=True, max_length=30, null=True, verbose_name='Номер метки')),
                ('serial_number', models.CharField(blank=True, max_length=30, null=True, verbose_name='Серийный номер')),
                ('creation_date', models.DateField(blank=True, null=True, verbose_name='Дата производства')),
                ('size', models.IntegerField(choices=[(5, 5), (12, 12), (27, 27), (50, 50)], default=50, verbose_name='Объём')),
                ('netto', models.FloatField(blank=True, null=True, verbose_name='Вес пустого баллона')),
                ('brutto', models.FloatField(blank=True, null=True, verbose_name='Вес наполненного баллона')),
                ('current_examination_date', models.DateField(blank=True, null=True, verbose_name='Дата освидетельствования')),
                ('next_examination_date', models.DateField(blank=True, null=True, verbose_name='Дата следующего освидетельствования')),
                ('diagnostic_date', models.DateField(blank=True, null=True, verbose_name='Дата последней диагностики')),
                ('working_pressure', models.FloatField(blank=True, null=True, verbose_name='Рабочее давление')),
                ('status', models.CharField(blank=True, max_length=100, null=True, verbose_name='Статус')),
                ('manufacturer', models.CharField(blank=True, max_length=30, null=True, verbose_name='Производитель')),
                ('wall_thickness', models.FloatField(blank=True, null=True, verbose_name='Толщина стенок')),
                ('filling_status', models.BooleanField(default=False, verbose_name='Готов к наполнению')),
                ('update_passport_required', models.BooleanField(default=True, verbose_name='Требуется обновление паспорта')),
                ('change_date', models.DateField(auto_now=True, verbose_name='Дата изменений')),
                ('change_time', models.TimeField(auto_now=True, verbose_name='Время изменений')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Баллон',
                'verbose_name_plural': 'Баллоны',
                'ordering': ['-change_date', '-change_time'],
            },
        ),
        migrations.CreateModel(
            name='BalloonEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.BigIntegerField()),
                ('nfc_tag', models.CharField(blank=True, max_length=30, null=True, verbose_name='Номер метки')),
                ('serial_number', models.CharField(blank=True, max_length=30, null=True, verbose_name='Серийный номер')),
                ('creation_date', models.DateField(blank=True, null=True, verbose_name='Дата производства')),
                ('size', models.IntegerField(choices=[(5, 5), (12, 12), (27, 27), (50, 50)], default=50, verbose_name='Объём')),
                ('netto', models.FloatField(blank=True, null=True, verbose_name='Вес пустого баллона')),
                ('brutto', models.FloatField(blank=True, null=True, verbose_name='Вес наполненного баллона')),
                ('current_examination_date', models.DateField(blank=True, null=True, verbose_name='Дата освидетельствования')),
                ('next_examination_date', models.DateField(blank=True, null=True, verbose_name='Дата следующего освидетельствования')),
                ('diagnostic_date', models.DateField(blank=True, null=True, verbose_name='Дата последней диагностики')),
                ('working_pressure', models.FloatField(blank=True, null=True, verbose_name='Рабочее давление')),
                ('status', models.CharField(blank=True, max_length=100, null=True, verbose_name='Статус')),
                ('manufacturer', models.CharField(blank=True, max_length=30, null=True, verbose_name='Производитель')),
                ('wall_thickness', models.FloatField(blank=True, null=True, verbose_name='Толщина стенок')),
                ('pgh_context', models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context')),
                ('pgh_obj', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='filling_station.balloon')),
                ('user', models.ForeignKey(db_constraint=False, default=1, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RailwayTank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_number', models.CharField(max_length=20, verbose_name='Номер ж/д цистерны')),
                ('empty_weight', models.FloatField(blank=True, null=True, verbose_name='Вес пустой цистерны')),
                ('full_weight', models.FloatField(blank=True, null=True, verbose_name='Вес полной цистерны')),
                ('gas_weight', models.FloatField(blank=True, null=True, verbose_name='Масса перевозимого газа')),
                ('gas_type', models.CharField(choices=[('Не выбран', 'Не выбран'), ('СПБТ', 'СПБТ'), ('ПБА', 'ПБА')], default='Не выбран', max_length=10, verbose_name='Тип газа')),
                ('is_on_station', models.BooleanField(blank=True, null=True, verbose_name='Находится на станции')),
                ('entry_date', models.DateField(blank=True, null=True, verbose_name='Дата въезда')),
                ('entry_time', models.TimeField(blank=True, null=True, verbose_name='Время въезда')),
                ('departure_date', models.DateField(blank=True, null=True, verbose_name='Дата выезда')),
                ('departure_time', models.TimeField(blank=True, null=True, verbose_name='Время выезда')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Ж/д цистерна',
                'verbose_name_plural': 'Ж/д цистерны',
                'ordering': ['-is_on_station', '-entry_date', '-entry_time', '-departure_date', '-departure_time'],
            },
        ),
        migrations.CreateModel(
            name='Reader',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(verbose_name='Номер считывателя')),
                ('nfc_tag', models.CharField(max_length=30, verbose_name='Номер метки')),
                ('serial_number', models.CharField(blank=True, max_length=30, null=True, verbose_name='Серийный номер')),
                ('size', models.IntegerField(choices=[(5, 5), (12, 12), (27, 27), (50, 50)], default=50, verbose_name='Объём')),
                ('netto', models.FloatField(blank=True, null=True, verbose_name='Вес пустого баллона')),
                ('brutto', models.FloatField(blank=True, null=True, verbose_name='Вес наполненного баллона')),
                ('filling_status', models.BooleanField(default=False, verbose_name='Готов к наполнению')),
                ('change_date', models.DateField(auto_now=True, verbose_name='Дата изменений')),
                ('change_time', models.TimeField(auto_now=True, verbose_name='Время изменений')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Считыватель',
                'verbose_name_plural': 'Считыватели',
                'ordering': ['-change_date', '-change_time'],
            },
        ),
        migrations.CreateModel(
            name='Trailer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trailer_brand', models.CharField(blank=True, max_length=20, null=True, verbose_name='Марка прицепа')),
                ('registration_number', models.CharField(max_length=10, verbose_name='Регистрационный знак')),
                ('capacity_cylinders', models.IntegerField(blank=True, null=True, verbose_name='Максимальная вместимость баллонов')),
                ('max_weight_of_transported_cylinders', models.FloatField(blank=True, null=True, verbose_name='Максимальная масса перевозимых баллонов')),
                ('max_mass_of_transported_gas', models.FloatField(blank=True, null=True, verbose_name='Максимальная масса перевозимого газа')),
                ('max_gas_volume', models.FloatField(blank=True, null=True, verbose_name='Максимальный объём перевозимого газа')),
                ('empty_weight', models.FloatField(blank=True, null=True, verbose_name='Вес пустого т/с (по техпаспорту)')),
                ('full_weight', models.FloatField(blank=True, null=True, verbose_name='Вес полного т/с (по техпаспорту)')),
                ('is_on_station', models.BooleanField(blank=True, null=True, verbose_name='Находится на станции')),
                ('entry_date', models.DateField(blank=True, null=True, verbose_name='Дата въезда')),
                ('entry_time', models.TimeField(blank=True, null=True, verbose_name='Время въезда')),
                ('departure_date', models.DateField(blank=True, null=True, verbose_name='Дата выезда')),
                ('departure_time', models.TimeField(blank=True, null=True, verbose_name='Время выезда')),
                ('type', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to='filling_station.trailertype', verbose_name='Тип')),
                ('truck', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, related_name='trailer', to='filling_station.truck', verbose_name='Автомобиль')),
            ],
            options={
                'verbose_name': 'Прицеп',
                'verbose_name_plural': 'Прицепы',
                'ordering': ['-entry_date', '-entry_time', '-departure_date', '-departure_time'],
            },
        ),
        migrations.AddField(
            model_name='truck',
            name='type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to='filling_station.trucktype', verbose_name='Тип'),
        ),
        migrations.CreateModel(
            name='RailwayBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('begin_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Дата начала приёмки')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата окончания приёмки')),
                ('gas_amount_spbt', models.FloatField(blank=True, null=True, verbose_name='Количество принятого СПБТ газа')),
                ('gas_amount_pba', models.FloatField(blank=True, null=True, verbose_name='Количество принятого ПБА газа')),
                ('is_active', models.BooleanField(blank=True, null=True, verbose_name='В работе')),
                ('user', models.ForeignKey(default=0, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('railway_tank_list', models.ManyToManyField(blank=True, to='filling_station.railwaytank', verbose_name='Список жд цистерн')),
                ('export_ttn', models.ForeignKey(default=0, on_delete=django.db.models.deletion.DO_NOTHING, related_name='export_ttn', to='filling_station.ttn', verbose_name='Возвратная ТТН')),
                ('import_ttn', models.ForeignKey(default=0, on_delete=django.db.models.deletion.DO_NOTHING, related_name='import_ttn', to='filling_station.ttn', verbose_name='ТТН на приёмку')),
            ],
            options={
                'verbose_name': 'Партия приёмки жд цистерн',
                'verbose_name_plural': 'Партии приёмки жд цистерн',
                'ordering': ['-begin_date'],
            },
        ),
        migrations.CreateModel(
            name='BalloonsUnloadingBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('begin_date', models.DateField(auto_now_add=True, null=True, verbose_name='Дата начала отгрузки')),
                ('begin_time', models.TimeField(auto_now_add=True, null=True, verbose_name='Время начала отгрузки')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Дата окончания отгрузки')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='Время окончания отгрузки')),
                ('reader_number', models.IntegerField(blank=True, null=True, verbose_name='Номер считывателя')),
                ('amount_of_rfid', models.IntegerField(blank=True, null=True, verbose_name='Количество баллонов по rfid')),
                ('amount_of_5_liters', models.IntegerField(blank=True, default=0, null=True, verbose_name='Количество 5л баллонов')),
                ('amount_of_12_liters', models.IntegerField(blank=True, default=0, null=True, verbose_name='Количество 12л баллонов')),
                ('amount_of_27_liters', models.IntegerField(blank=True, default=0, null=True, verbose_name='Количество 27л баллонов')),
                ('amount_of_50_liters', models.IntegerField(blank=True, default=0, null=True, verbose_name='Количество 50л баллонов')),
                ('gas_amount', models.FloatField(blank=True, null=True, verbose_name='Количество отгруженного газа')),
                ('is_active', models.BooleanField(blank=True, null=True, verbose_name='В работе')),
                ('balloon_list', models.ManyToManyField(blank=True, to='filling_station.balloon', verbose_name='Список баллонов')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('trailer', models.ForeignKey(blank=True, default=0, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='filling_station.trailer', verbose_name='Прицеп')),
                ('truck', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='filling_station.truck', verbose_name='Автомобиль')),
                ('ttn', models.ForeignKey(default=0, on_delete=django.db.models.deletion.DO_NOTHING, to='filling_station.ttn', verbose_name='ТТН')),
            ],
            options={
                'verbose_name': 'Партия отгрузки баллонов',
                'verbose_name_plural': 'Партии отгрузки баллонов',
                'ordering': ['-begin_date', '-begin_time'],
            },
        ),
        migrations.CreateModel(
            name='BalloonsLoadingBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('begin_date', models.DateField(auto_now_add=True, null=True, verbose_name='Дата начала приёмки')),
                ('begin_time', models.TimeField(auto_now_add=True, null=True, verbose_name='Время начала приёмки')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Дата окончания приёмки')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='Время окончания приёмки')),
                ('reader_number', models.IntegerField(blank=True, null=True, verbose_name='Номер считывателя')),
                ('amount_of_rfid', models.IntegerField(blank=True, null=True, verbose_name='Количество баллонов по rfid')),
                ('amount_of_5_liters', models.IntegerField(blank=True, default=0, null=True, verbose_name='Количество 5л баллонов')),
                ('amount_of_12_liters', models.IntegerField(blank=True, default=0, null=True, verbose_name='Количество 12л баллонов')),
                ('amount_of_27_liters', models.IntegerField(blank=True, default=0, null=True, verbose_name='Количество 27л баллонов')),
                ('amount_of_50_liters', models.IntegerField(blank=True, default=0, null=True, verbose_name='Количество 50л баллонов')),
                ('gas_amount', models.FloatField(blank=True, null=True, verbose_name='Количество принятого газа')),
                ('is_active', models.BooleanField(blank=True, null=True, verbose_name='В работе')),
                ('balloon_list', models.ManyToManyField(blank=True, to='filling_station.balloon', verbose_name='Список баллонов')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('trailer', models.ForeignKey(blank=True, default=0, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='filling_station.trailer', verbose_name='Прицеп')),
                ('truck', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='filling_station.truck', verbose_name='Автомобиль')),
                ('ttn', models.ForeignKey(default=0, on_delete=django.db.models.deletion.DO_NOTHING, to='filling_station.ttn', verbose_name='ТТН')),
            ],
            options={
                'verbose_name': 'Партия приёмки баллонов',
                'verbose_name_plural': 'Партии приёмки баллонов',
                'ordering': ['-begin_date', '-begin_time'],
            },
        ),
        migrations.CreateModel(
            name='AutoGasBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_type', models.CharField(choices=[('l', 'Приёмка'), ('u', 'Отгрузка')], default='u', max_length=10, verbose_name='Тип партии')),
                ('begin_date', models.DateField(auto_now_add=True, null=True, verbose_name='Дата начала приёмки')),
                ('begin_time', models.TimeField(auto_now_add=True, null=True, verbose_name='Время начала приёмки')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Дата окончания приёмки')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='Время окончания приёмки')),
                ('gas_amount', models.FloatField(blank=True, null=True, verbose_name='Количество газа (массомер)')),
                ('gas_type', models.CharField(choices=[('Не выбран', 'Не выбран'), ('СПБТ', 'СПБТ'), ('ПБА', 'ПБА')], default='Не выбран', max_length=10, verbose_name='Тип газа')),
                ('scale_empty_weight', models.FloatField(blank=True, null=True, verbose_name='Вес пустого т/с (весы)')),
                ('scale_full_weight', models.FloatField(blank=True, null=True, verbose_name='Вес полного т/с (весы)')),
                ('weight_gas_amount', models.FloatField(blank=True, null=True, verbose_name='Количество газа (весы)')),
                ('is_active', models.BooleanField(blank=True, null=True, verbose_name='В работе')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('trailer', models.ForeignKey(blank=True, default=0, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='filling_station.trailer', verbose_name='Прицеп')),
                ('truck', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='filling_station.truck', verbose_name='Автомобиль')),
                ('ttn', models.ForeignKey(default=0, on_delete=django.db.models.deletion.DO_NOTHING, to='filling_station.ttn', verbose_name='ТТН')),
            ],
            options={
                'verbose_name': 'Автоколонка',
                'verbose_name_plural': 'Автоколонка',
                'ordering': ['-begin_date', '-begin_time'],
            },
        ),
        migrations.AddIndex(
            model_name='balloon',
            index=models.Index(fields=['-nfc_tag', '-serial_number'], name='filling_sta_nfc_tag_4ffc6b_idx'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='balloon',
            trigger=pgtrigger.compiler.Trigger(name='insert_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "filling_station_balloonevent" ("brutto", "creation_date", "current_examination_date", "diagnostic_date", "id", "manufacturer", "netto", "next_examination_date", "nfc_tag", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "serial_number", "size", "status", "user_id", "wall_thickness", "working_pressure") VALUES (NEW."brutto", NEW."creation_date", NEW."current_examination_date", NEW."diagnostic_date", NEW."id", NEW."manufacturer", NEW."netto", NEW."next_examination_date", NEW."nfc_tag", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."serial_number", NEW."size", NEW."status", NEW."user_id", NEW."wall_thickness", NEW."working_pressure"); RETURN NULL;', hash='595671db7fe2a0768e0f6678a184ed5e62814037', operation='INSERT', pgid='pgtrigger_insert_insert_703b2', table='filling_station_balloon', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='balloon',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."brutto" IS DISTINCT FROM (NEW."brutto") OR OLD."creation_date" IS DISTINCT FROM (NEW."creation_date") OR OLD."current_examination_date" IS DISTINCT FROM (NEW."current_examination_date") OR OLD."diagnostic_date" IS DISTINCT FROM (NEW."diagnostic_date") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."manufacturer" IS DISTINCT FROM (NEW."manufacturer") OR OLD."netto" IS DISTINCT FROM (NEW."netto") OR OLD."next_examination_date" IS DISTINCT FROM (NEW."next_examination_date") OR OLD."nfc_tag" IS DISTINCT FROM (NEW."nfc_tag") OR OLD."serial_number" IS DISTINCT FROM (NEW."serial_number") OR OLD."size" IS DISTINCT FROM (NEW."size") OR OLD."status" IS DISTINCT FROM (NEW."status") OR OLD."user_id" IS DISTINCT FROM (NEW."user_id") OR OLD."wall_thickness" IS DISTINCT FROM (NEW."wall_thickness") OR OLD."working_pressure" IS DISTINCT FROM (NEW."working_pressure"))', func='INSERT INTO "filling_station_balloonevent" ("brutto", "creation_date", "current_examination_date", "diagnostic_date", "id", "manufacturer", "netto", "next_examination_date", "nfc_tag", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "serial_number", "size", "status", "user_id", "wall_thickness", "working_pressure") VALUES (NEW."brutto", NEW."creation_date", NEW."current_examination_date", NEW."diagnostic_date", NEW."id", NEW."manufacturer", NEW."netto", NEW."next_examination_date", NEW."nfc_tag", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."serial_number", NEW."size", NEW."status", NEW."user_id", NEW."wall_thickness", NEW."working_pressure"); RETURN NULL;', hash='b97d626dfd3d5bc45a5f299f1335c32378d04c85', operation='UPDATE', pgid='pgtrigger_update_update_08342', table='filling_station_balloon', when='AFTER')),
        ),
    ]
